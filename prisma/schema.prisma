// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  cpf       String?   @unique // CPF do usuário
  phone     String?   // Telefone de contato
  role      String    @default("customer") // valores possíveis: "customer", "admin"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  addresses Address[]
}

model Address {
  id            Int       @id @default(autoincrement())
  userId        Int
  recipientName String    // Nome do destinatário
  cep           String    // CEP (Código de Endereçamento Postal)
  street        String    // Rua/Avenida
  number        String    // Número
  complement    String?   // Complemento (opcional)
  neighborhood  String    // Bairro
  city          String    // Cidade
  state         String    // Estado (UF)
  isDefault     Boolean   @default(false) // Endereço padrão
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  addressId Int         // Endereço de entrega
  total     Float
  status    String      @default("pending") // pending, processing, shipped, delivered, cancelled
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  address   Address     @relation(fields: [addressId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}